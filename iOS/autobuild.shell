#!/bin/bash

echo "Shell 输出脚本名称及参数";
# echo "执行的脚本名：$0";
# echo "第一个参数为：$1";
# echo "第二个参数为：$2";
# echo "第三个参数为：$3";
echo "所有参数为：$@";
# echo "当前选项：$-";

if [[ ! -n $1 ]]; then
	echo "工程路径为空"
	exit
fi
if [[ ! -n $2 ]]; then
	echo "配置文件路径为空"
	exit
fi

# plist解析相关函数

# 读取 array
# $1: plist 文件路径
# $2: key
# return: getArrayReturn
plistGetArray()
{
	getArrayReturn=()
	local array
	local index=0
	local item=$(/usr/libexec/PlistBuddy -c "print $2:$index" "$1")

	while [[ -n $item ]];
	do
		getArrayReturn[index]="$item"
		index=$(expr ${index} + 1)
		item=$(/usr/libexec/PlistBuddy -c "print $2:$index" "$1")
	done
}

# 写入字段, 如果没有则先新建再写入
# $1: plist 文件路径
# $2: key
# $3: type (Types: string array dict bool real integer date data)
# $4: value
plistResetValue()
{
	#先删除避免dict array 等类型残留原有内容
	/usr/libexec/PlistBuddy -c "Delete $2 $3" "$1"
	/usr/libexec/PlistBuddy -c "Add $2 $3" "$1"
	if [[ -n $4 ]]; then
		/usr/libexec/PlistBuddy -c "Set $2 $4" "$1"
	fi
}



projectPath="$1"
optionsPlistPath="$2"
# projectPath="/Users/Megatron/Documents/work/QKSdkProxy_ios/Unity-iPhone.xcodeproj"
# optionsPlistPath="/Users/Megatron/Documents/work/UnitySdkProxy/iOS/ExportOptions.plist"
# optionsPlistPath="$(PWD)/ExportOptions.plist"

# 工程文件夹路径
projectDir="${projectPath%/*}"

mkdir "${projectDir}/build"

# 导出配置文件生成位置 exportOptions.plist
exportOptionsPlistPath="${projectDir}/build/exportOptions.plist"
# /usr/libexec/PlistBuddy -c "Save" "${exportOptionsPlistPath}"


# 一、读取参数
# target名
version=`/usr/libexec/PlistBuddy -c "print version" "${optionsPlistPath}"`
buildVersion=`/usr/libexec/PlistBuddy -c "print buildVersion" "${optionsPlistPath}"`
temDisplayName=`/usr/libexec/PlistBuddy -c "print bundleDisplayName" "${optionsPlistPath}"`
bundleDisplayName="${temDisplayName-e}"

scheme=`/usr/libexec/PlistBuddy -c "print scheme" "${optionsPlistPath}"`
#app-store, ad-hoc, enterprise, development
configuration=`/usr/libexec/PlistBuddy -c "print configuration" "${optionsPlistPath}"`
CODE_SIGN_IDENTITY=`/usr/libexec/PlistBuddy -c "print CODE_SIGN_IDENTITY" "${optionsPlistPath}"`
DEVELOPMENT_TEAM=`/usr/libexec/PlistBuddy -c "print DEVELOPMENT_TEAM" "${optionsPlistPath}"`
PRODUCT_BUNDLE_IDENTIFIER=`/usr/libexec/PlistBuddy -c "print PRODUCT_BUNDLE_IDENTIFIER" "${optionsPlistPath}"`
PROVISIONING_PROFILE_SPECIFIER=`/usr/libexec/PlistBuddy -c "print PROVISIONING_PROFILE_SPECIFIER" "${optionsPlistPath}"`
PROVISIONING_PROFILE=`/usr/libexec/PlistBuddy -c "print PROVISIONING_PROFILE" "${optionsPlistPath}"`
# 选择证书方式 CODE_SIGN_STYLE=Manual/Automatic
CODE_SIGN_STYLE=Manual

# 需要拷贝的资源列表 srcArray
plistGetArray "${optionsPlistPath}" 'srcArray'
srcArray="${getArrayReturn[*]}"

plistGetArray "${optionsPlistPath}" 'frameworkArray'
frameworkArray="${getArrayReturn[*]}"

plistGetArray "${optionsPlistPath}" 'systemTbdsArray'
systemTbdsArray="${getArrayReturn[*]}"

# 导出配置需要改为小写
signingStyle=`echo "$CODE_SIGN_STYLE" | tr '[A-Z]' '[a-z]'`

#app-store, ad-hoc, enterprise, development
method="$configuration"

# 设置 exportOptionsPlist 可以先手动到处一个ipa 参考导出目录中的 ExportOptions.plist 文件
plistResetValue "${exportOptionsPlistPath}" compileBitcode bool NO
plistResetValue "${exportOptionsPlistPath}" method string "$method"
plistResetValue "${exportOptionsPlistPath}" provisioningProfiles dict
plistResetValue "${exportOptionsPlistPath}" "provisioningProfiles:$PRODUCT_BUNDLE_IDENTIFIER" string "$PROVISIONING_PROFILE_SPECIFIER"
plistResetValue "${exportOptionsPlistPath}" signingCertificate string "$CODE_SIGN_IDENTITY"
plistResetValue "${exportOptionsPlistPath}" signingStyle string "$signingStyle"
plistResetValue "${exportOptionsPlistPath}" stripSwiftSymbols bool YES
plistResetValue "${exportOptionsPlistPath}" teamID string "$DEVELOPMENT_TEAM"
plistResetValue "${exportOptionsPlistPath}" thinning string "<none>"
/usr/libexec/PlistBuddy -c "Save" "${exportOptionsPlistPath}"

# 拷贝文件、添加到工程引用、打包前设置
/Users/Megatron/Documents/work/UnitySdkProxy/iOS/rubyShell/autoSetCommand.rb \
 "$projectPath" "$PRODUCT_BUNDLE_IDENTIFIER" \
 -srcArray "${srcArray[*]}" -frameworkArray "${frameworkArray[*]}" -systemTbdsArray "${systemTbdsArray[*]}"

# 各种输出文件夹
# 时间戳
buildTime=$(date +%Y%m%d%H%M)
derivedDataPath="${projectDir}/build/DerivedData"
archivePath="${projectDir}/build/archive/${configuration}.xcarchive"
exportPath="${projectDir}/build/export/${bundleDisplayName}_${configuration}_${buildTime}"

# 二、修改 Info.plist
infoPlistPath="${projectDir}/Info.plist"
echo $infoPlistPath
/usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${version}" "${infoPlistPath}"
/usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${buildVersion}" "${infoPlistPath}"
/usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName ${bundleDisplayName}" "${infoPlistPath}"
/usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier \${PRODUCT_BUNDLE_IDENTIFIER}" "${infoPlistPath}"
/usr/libexec/PlistBuddy -c "Save" "${infoPlistPath}"

# # 三、打开钥匙串访问， 导入证书
# # security unlock-keychain "-p" 系统密码 "/Users/***/Library/Keychains/login.keychain" ;

# 四、清理项目
xcodebuild clean -project "$projectPath" -scheme "$scheme"
# -configuration $configuration clean

# 五、编译
# 1、编译 pods
# xcodebuild -workspace ***.xcworkspace -scheme Pods-*** -derivedDataPath build/DerivedData OBJROOT=$(PWD)/build SYMROOT=$(PWD)/build -configuration $(configWay)
# 2、编译 workspace

# xcodebuild archive -workspace "${projectPath}/project.xcworkspace" \
xcodebuild archive -project $projectPath -scheme "$scheme" \
 -derivedDataPath "$derivedDataPath" -archivePath "$archivePath" \
 DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
 PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER" PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
 PROVISIONING_PROFILE="$PROVISIONING_PROFILE" \
 IPHONEOS_DEPLOYMENT_TARGET="8.0" CODE_SIGN_STYLE="$CODE_SIGN_STYLE"

# -configuration "$configuration" 

echo `/usr/libexec/PlistBuddy -c "print" "$exportOptionsPlistPath"`
# 3、导出ipa
xcodebuild -exportArchive -archivePath "$archivePath" -exportPath "$exportPath" -exportOptionsPlist "$exportOptionsPlistPath"
# -exportFormat IPA  -exportProvisioningProfile $profileName

# pause
