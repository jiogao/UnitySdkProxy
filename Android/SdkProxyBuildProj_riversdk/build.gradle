// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
}

apply plugin: 'com.android.application'

configurations {
//    sdktestImplementation
//    sdktestDebugImplementation
//    sdktestReleaseImplementation

//    riversdkImplementation
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':unity-android-resources')

    //方法数超出65535设置
    implementation 'com.android.support:multidex:1.0.2'

    implementation project(':riversdk_core_libs')
}

android {

    compileSdkVersion ANDROID_COMPLIE_SDK_VERSION
    buildToolsVersion ANDROID_COMPLIE_TOOL_VERSION

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
//        debug {
//            keyAlias alias
//            keyPassword password
//            storeFile file(filePath)
//            storePassword(password)
//        }
        release {
            def alias = "xwm"
            def password = "android"
            def filePath = "../../Channel/RiverSDK/Key/com.blancozone.xwm.gp.jks"

            keyAlias alias
            keyPassword password
            storeFile file(filePath)
            storePassword(password)
        }
    }

    def newVersionCode = getVersionCode()

    defaultConfig {
        minSdkVersion ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion ANDROID_BUILD_TARGET_SDK_VERSION
        applicationId 'com.qk.hopelegends'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
//        versionCode project.VERSION_CODE as int
        versionCode newVersionCode
        versionName project.VERSION_NAME

        //方法数超出65535设置
        multiDexEnabled true

        //Unity build id 与obb 中的校验码一致
        manifestPlaceholders = [
                "unity_build_id"  : project.unity_build_id,
        ]
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', 'dev_setting.xml']
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'
            signingConfig signingConfigs.debug
            jniDebuggable true
        }
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        doNotStrip '*/armeabi-v7a/*.so'
        doNotStrip '*/arm64-v8a/*.so'
    }


    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }

    //---------- productFlavors ----------
    flavorDimensions "channel"
    productFlavors {
        riversdk {
            dimension "channel"
            applicationId "com.blancozone.xwm.gp"
        }
    }

//    def targetProjPath = project["targetProjPath"]
    def targetProjPath = parseLocalProperties()
    println 'targetProjPath:' + targetProjPath

    //公共代码位置
    def sdkProxyJavaPath = "../QKSdkProxy/"
    def localPath = './'
    def target_unityLibrary_src_main = targetProjPath + 'unityLibrary/src/main/'
    def target_launcher_src_main = targetProjPath + 'launcher/src/main/'
    def local_src_main = localPath + 'src/main/'
    sourceSets {
        main {
            assets.srcDirs = [target_unityLibrary_src_main + 'assets']                  // asset资源目录
            jniLibs.srcDirs = [target_unityLibrary_src_main + 'jniLibs']                // jniLibs
//            java.srcDirs = [local_src_main + 'java', target_src_main + 'java']    // 指定java源代码目录
            res.srcDirs = [target_launcher_src_main + 'res']

            java.srcDirs += target_unityLibrary_src_main + 'java'
            java.srcDirs += sdkProxyJavaPath + 'java'

//            manifest.srcDirs target_src_main + 'AndroidManifest.xml'
        }
        riversdk {
//            java.srcDirs = ['./src/sdktest/' + 'java']
        }
    }
}

//读取local.properties配置
//请先在local.properties中添加目标工程路径, 如： targetProjPath=C\:\\Users\\K\\Desktop\\HopeLegends_Android\\ExportProj\\HopeLegends
def parseLocalProperties(){
    File file = rootProject.file('local.properties')
    if(file.exists()){
        InputStream inputStream = rootProject.file('local.properties').newDataInputStream();
        Properties properties = new Properties()
        properties.load(inputStream)

        if(properties.containsKey("targetProjPath")){
            def targetProjPath = properties.getProperty("targetProjPath") + '/'

////            把 targetProjPath  保存到 project["targetProjPath"]
//            ext.targetProjPath = targetProjPath
//            println 'project[\"targetProjPath\"]:' + project["targetProjPath"]

            return targetProjPath
        } else {
            println 'parseLocalProperties error: targetProjPath not exist!'
        }
    } else {
        println 'parseLocalProperties error: local.properties not exist!'
    }
}

//VersionCode自增
def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {// 判断文件读取异常
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()// 读取文件里面的版本号
        def runTasks = gradle.startParameter.taskNames
        println 'runTasks: ' + runTasks
//        if ('assembleRelease' in runTasks ) //仅在assembleRelease任务是增加版本号,其他渠道包在此分别配置
        if (runTasks.size > 0)
        {
            // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
            println 'versionCode auto add'
        }
        println 'versionCode :' + versionCode
        return versionCode // 返回自增之后的版本号
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
