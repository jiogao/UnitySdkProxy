// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN

apply plugin: 'com.android.application'
apply from: '../config.gradle'

dependencies {
    implementation project(':unityLibrary')
}

android {
    compileSdkVersion ANDROID_COMPLIE_SDK_VERSION       //28
    buildToolsVersion ANDROID_COMPLIE_TOOL_VERSION      //'28.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //版本号自增
    def newVersionCode = getVersionCode()

    defaultConfig {
        minSdkVersion ANDROID_BUILD_MIN_SDK_VERSION         //19
        targetSdkVersion ANDROID_BUILD_TARGET_SDK_VERSION   //28
        applicationId 'com.qk.hopelegends'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        versionCode newVersionCode                          //1
        versionName project.VERSION_NAME                    //'1.0.0'
    }

    aaptOptions {
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', 'dev_setting.xml']
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.debug
            jniDebuggable true
        }
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        doNotStrip '*/armeabi-v7a/*.so'
        doNotStrip '*/arm64-v8a/*.so'
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }

    //---------- productFlavors ----------
    flavorDimensions "channel"
    productFlavors {
//        sdktest {
//            dimension "channel"
//            applicationId project.TARGET_PACKAGE
//        }
        sdk37 {
            dimension "channel"
            applicationId project.TARGET_PACKAGE
        }
    }

    sourceSets {
        main {
            //res.srcDirs = [rootProject.ext.target_launcher_src_main + 'res']
        }
//        sdktest {
////            java.srcDirs = ['./src/sdktest/' + 'java']
//        }
        sdk37 {
//            java.srcDirs = ['./src/sdk37/' + 'java']
        }
    }
}

//VersionCode自增
def getVersionCode() {
    def versionFile = file('../version.properties')
    if (versionFile.canRead()) {// 判断文件读取异常
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()// 读取文件里面的版本号
        def runTasks = gradle.startParameter.taskNames
        println 'runTasks: ' + runTasks
//        if ('assembleRelease' in runTasks ) //仅在assembleRelease任务是增加版本号,其他渠道包在此分别配置
        if (runTasks.size > 0 && runTasks[0].contains("release"))
        {
            // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
            println 'versionCode auto add'
        }
        println 'versionCode :' + versionCode
        return versionCode // 返回自增之后的版本号
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
